name: Build

on:
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '**.kt'
      - '**.kts'
      - '**.gradle'
      - 'gradle/**'
      - '.github/workflows/build.yml'
  push:
    branches: [ main, master, develop ]
    paths:
      - '**.kt'
      - '**.kts'
      - '**.gradle'
      - 'gradle/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    name: Build Library and Demo App
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        build-type: [debug, release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build library (${{ matrix.build-type }})
        id: build-library
        continue-on-error: true
        run: |
          BUILD_TYPE=${{ matrix.build-type }}
          BUILD_TASK=$(echo "$BUILD_TYPE" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
          echo "Building library ($BUILD_TYPE)..."
          ./gradlew :library:assemble$BUILD_TASK --no-daemon --stacktrace

      - name: Build demo app (${{ matrix.build-type }})
        id: build-app
        continue-on-error: true
        run: |
          BUILD_TYPE=${{ matrix.build-type }}
          BUILD_TASK=$(echo "$BUILD_TYPE" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
          echo "Building demo app ($BUILD_TYPE)..."
          ./gradlew :app:assemble$BUILD_TASK --no-daemon --stacktrace

      - name: Run Android Lint on library
        id: lint-library
        continue-on-error: true
        if: matrix.build-type == 'debug'
        run: |
          echo "Running lint on library module..."
          ./gradlew :library:lintDebug --no-daemon --stacktrace

      - name: Run Android Lint on app
        id: lint-app
        continue-on-error: true
        if: matrix.build-type == 'debug'
        run: |
          echo "Running lint on app module..."
          ./gradlew :app:lintDebug --no-daemon --stacktrace

      - name: Upload library artifact
        if: steps.build-library.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: library-${{ matrix.build-type }}
          path: library/build/outputs/aar/*.aar
          retention-days: 30

      - name: Upload demo app artifact
        if: steps.build-app.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: demo-app-${{ matrix.build-type }}
          path: app/build/outputs/apk/${{ matrix.build-type }}/*.apk
          retention-days: 30

      - name: Upload lint reports
        if: always() && matrix.build-type == 'debug'
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: |
            library/build/reports/lint-results-*.html
            app/build/reports/lint-results-*.html
          retention-days: 30

      - name: Check build results
        id: check-results
        if: always()
        run: |
          LIBRARY_STATUS="${{ steps.build-library.outcome }}"
          APP_STATUS="${{ steps.build-app.outcome }}"
          LINT_LIBRARY_STATUS="${{ steps.lint-library.outcome }}"
          LINT_APP_STATUS="${{ steps.lint-app.outcome }}"

          echo "Library build: $LIBRARY_STATUS"
          echo "App build: $APP_STATUS"
          echo "Library lint: $LINT_LIBRARY_STATUS"
          echo "App lint: $LINT_APP_STATUS"

          if [[ "$LIBRARY_STATUS" == "failure" ]] || [[ "$APP_STATUS" == "failure" ]]; then
            echo "has-failures=true" >> $GITHUB_OUTPUT
            echo "Build failed"
          elif [[ "${{ matrix.build-type }}" == "debug" ]] && ([[ "$LINT_LIBRARY_STATUS" == "failure" ]] || [[ "$LINT_APP_STATUS" == "failure" ]]); then
            echo "has-failures=true" >> $GITHUB_OUTPUT
            echo "Lint failed"
          else
            echo "has-failures=false" >> $GITHUB_OUTPUT
            echo "Build succeeded"
          fi

      - name: Comment PR with results (debug only)
        if: always() && github.event_name == 'pull_request' && matrix.build-type == 'debug'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const hasFailures = '${{ steps.check-results.outputs.has-failures }}' === 'true';
            const libraryStatus = '${{ steps.build-library.outcome }}';
            const appStatus = '${{ steps.build-app.outcome }}';
            const lintLibraryStatus = '${{ steps.lint-library.outcome }}';
            const lintAppStatus = '${{ steps.lint-app.outcome }}';

            const statusEmoji = (status) => status === 'success' ? '✅' : status === 'skipped' ? '⏭️' : '❌';

            let body;
            if (hasFailures) {
              body = `## ❌ Build Failed

            **Build Results:**
            - Library: ${statusEmoji(libraryStatus)} ${libraryStatus}
            - Demo App: ${statusEmoji(appStatus)} ${appStatus}

            **Lint Results:**
            - Library: ${statusEmoji(lintLibraryStatus)} ${lintLibraryStatus}
            - Demo App: ${statusEmoji(lintAppStatus)} ${lintAppStatus}

            ### What to do next:

            1. Download the [lint reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) if lint failed
            2. Fix the build or lint issues
            3. Run locally to verify:
               - Build: \`./gradlew assemble\`
               - Lint: \`./gradlew lint\`
            4. Push the fixes

            **Local commands:**
            \`\`\`bash
            # Build all modules
            ./gradlew assemble

            # Build specific modules
            ./gradlew :library:assembleDebug
            ./gradlew :app:assembleDebug

            # Run lint checks
            ./gradlew lint
            \`\`\`

            ### Artifacts
            - [Download build artifacts and reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            } else {
              body = `## ✅ Build Succeeded

            **Build Results:**
            - Library: ${statusEmoji(libraryStatus)} ${libraryStatus}
            - Demo App: ${statusEmoji(appStatus)} ${appStatus}

            **Lint Results:**
            - Library: ${statusEmoji(lintLibraryStatus)} ${lintLibraryStatus}
            - Demo App: ${statusEmoji(lintAppStatus)} ${lintAppStatus}

            All modules built successfully!

            ### Artifacts
            - [Download library AAR and demo APK](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Generate build summary
        if: always()
        run: |
          echo "## Build Results (${{ matrix.build-type }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-results.outputs.has-failures }}" == "true" ]; then
            echo "❌ **Status:** FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Build Results:**" >> $GITHUB_STEP_SUMMARY
            echo "- Library: ${{ steps.build-library.outcome }}" >> $GITHUB_STEP_SUMMARY
            echo "- Demo App: ${{ steps.build-app.outcome }}" >> $GITHUB_STEP_SUMMARY

            if [ "${{ matrix.build-type }}" == "debug" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Lint Results:**" >> $GITHUB_STEP_SUMMARY
              echo "- Library: ${{ steps.lint-library.outcome }}" >> $GITHUB_STEP_SUMMARY
              echo "- Demo App: ${{ steps.lint-app.outcome }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ **Status:** PASSED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All modules built successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Build Results:**" >> $GITHUB_STEP_SUMMARY
            echo "- Library: ${{ steps.build-library.outcome }}" >> $GITHUB_STEP_SUMMARY
            echo "- Demo App: ${{ steps.build-app.outcome }}" >> $GITHUB_STEP_SUMMARY

            if [ "${{ matrix.build-type }}" == "debug" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Lint Results:**" >> $GITHUB_STEP_SUMMARY
              echo "- Library: ${{ steps.lint-library.outcome }}" >> $GITHUB_STEP_SUMMARY
              echo "- Demo App: ${{ steps.lint-app.outcome }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Fail workflow if build failed
        if: steps.check-results.outputs.has-failures == 'true'
        run: |
          echo "::error::Build or lint checks failed"
          exit 1
